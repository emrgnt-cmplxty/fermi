name: Benchmark

on:
  push:
     branches: [ main, extensions ]

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  diff:
    runs-on: [ubuntu-latest]
    outputs:
      isRust: ${{ steps.diff.outputs.isRust }}
    steps:
    - uses: actions/checkout@v3
    - name: Detect Changes
      uses: './.github/actions/diffs'
      id: diff

  bench:
    needs: diff
    if: github.event.pull_request.draft == false && needs.diff.outputs.isRust == 'true'
    runs-on: [ubuntu-ghcloud]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
    # Turn off the caching on self-hosted jobs
    # Enable caching of the 'librocksdb-sys' crate by additionally caching the
    # 'librocksdb-sys' src directory which is managed by cargo
    # - uses: bmwill/rust-cache@v1 # Fork of 'Swatinem/rust-cache' which allows caching additional paths
    #   with:
    #     path: ~/.cargo/registry/src/**/librocksdb-sys-*
    - name: Install huniq
      uses: actions-rs/install@v0.1
      with:
        crate: huniq
    - name: prepare artifact directory
      run: |
        mkdir -p artifacts
        echo '# Bench results' > artifacts/owned.txt
        echo '# Bench results' > artifacts/shared.txt
    - name: compile benchmark
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release
    - name: run benchmark
      run: |
        set -o pipefail
        cargo run --package sui-benchmark --bin stress -- --log-path /tmp/stress.log --num-client-threads 10 --num-server-threads 24 --num-transfer-accounts 2 bench --target-qps 100 --num-workers 10  --transfer-object 100 --run-duration 60s 2>&1 | huniq | tee -a artifacts/owned.txt
        cargo run --package sui-benchmark --bin stress -- --log-path /tmp/stress.log --num-client-threads 10 --num-server-threads 24 --num-transfer-accounts 2 bench --target-qps 100 --num-workers 10  --shared-counter 100 --run-duration 60s 2>&1 | huniq | tee -a artifacts/shared.txt
    - name: retrieve benchmark results
      id: get-comment-body
      run: |
        owned="Owned $(cat artifacts/owned.txt | grep -e '|' -e '-' -e 'Bench' -e '+')"
        shared="Shared $(cat artifacts/shared.txt | grep -e '|' -e '-' -e 'Bench' -e '+')"
        echo ::set-output name=owned::$owned
        echo ::set-output name=shared::$shared
    - name: Create commit comment
      uses: peter-evans/commit-comment@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          Benchmark Reports:
          - ${{ steps.get-comment-body.outputs.owned }}
          - ${{ steps.get-comment-body.outputs.shared }}
