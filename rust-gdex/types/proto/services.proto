// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package services;

// IMPORTS

import "block.proto";
import "transaction.proto";

// INTERFACE

message Empty {}

// SUBMITTER

service TransactionSubmitter {
    // submit a transaction
    rpc SubmitTransaction(transaction.SignedTransaction) returns (Empty) {}
    
    // submit a transaction via stream
    rpc SubmitTransactionStream(stream transaction.SignedTransaction) returns (Empty) {}
}

// FAUCET

service Faucet {
    // request airdrop
    rpc Airdrop (FaucetAirdropRequest) returns (FaucetAirdropResponse);
}

message FaucetAirdropRequest {
    string airdrop_to = 1;
    uint64 amount = 2;
}

message FaucetAirdropResponse {
    bool successful = 1;
}

// RELAYER

service Relayer {
    // request latest block info
    rpc GetLatestBlockInfo (RelayerGetLatestBlockInfoRequest) returns (RelayerBlockInfoResponse);

    // request block info by block number
    rpc GetBlockInfo (RelayerGetBlockInfoRequest) returns (RelayerBlockInfoResponse);

    // request block (includes transactions)
    rpc GetBlock (RelayerGetBlockRequest) returns (RelayerBlockResponse);

    // request orderbook depth snapshot
    rpc GetLatestOrderbookDepth (RelayerGetLatestOrderbookDepthRequest) returns (RelayerLatestOrderbookDepthResponse);

    // request orderbook metrics
    rpc GetFuturesPositions (RelayerGetFuturesPositionsRequest) returns (RelayerFuturesPositionsResponse);

    // request metrics
    rpc GetLatestMetrics (RelayerMetricsRequest) returns (RelayerMetricsResponse);
}

// block info

message RelayerGetLatestBlockInfoRequest {}

message RelayerGetBlockInfoRequest {
    uint64 block_number = 1;
}

message RelayerBlockInfoResponse {
    bool successful = 1;
    block.BlockInfo block_info = 2;
}

// block

message RelayerGetBlockRequest {
    uint64 block_number = 1;
}

message RelayerBlock {
    bytes block = 1;
}

message RelayerBlockResponse {
    bool successful = 1;
    RelayerBlock block = 2;
}

// orderbook depth

message RelayerGetLatestOrderbookDepthRequest {
    uint64 base_asset_id = 1;
    uint64 quote_asset_id = 2;
    uint64 depth = 3;
}

message Depth {
    uint64 price = 1;
    uint64 quantity = 2;
}

message RelayerLatestOrderbookDepthResponse {
    repeated Depth bids = 1;
    repeated Depth asks = 2;
}


message RelayerGetFuturesPositionsRequest {
    bytes user = 1;
    bytes market_admin = 2;
}

message FuturesPosition {
    uint64 quantity = 1;
    uint64 side = 2;
    uint64 average_price = 3;
}

message RelayerFuturesPositionsResponse {
    repeated FuturesPosition positions = 1;
}

// metrics

message RelayerMetricsRequest {}

message RelayerMetricsResponse {
    uint64 average_latency = 1;
    double average_tps = 2;
}