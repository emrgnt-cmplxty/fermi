// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package gdex;

message Transaction {
    bytes transaction = 1;
}

// Empty message for when we don't have anything to return
message Empty {}

service Transactions {
    // Submit a Transactions
    rpc SubmitTransaction(Transaction) returns (Empty) {}

    // Submit a Transactions
    rpc SubmitTransactionStream(stream Transaction) returns (Empty) {}
}

// Faucet service for airdropping
service Faucet {
    rpc Airdrop (FaucetAirdropRequest) returns (FaucetAirdropResponse);
}

message FaucetAirdropRequest {
    string airdrop_to = 1;
    uint64 amount = 2;
}

message FaucetAirdropResponse {
    bool successful = 1;
}

// Relay service for relaying information outside
service Relayer {
    rpc GetLatestBlockInfo (RelayerGetLatestBlockInfoRequest) returns (RelayerBlockInfoResponse);
    rpc GetBlockInfo (RelayerGetBlockInfoRequest) returns (RelayerBlockInfoResponse);
    rpc GetBlock (RelayerGetBlockRequest) returns (RelayerBlockResponse);
    rpc GetOrderbookSnap (RelayerGetOrderbookSnapRequest) returns (RelayerOrderbookSnapResponse);
}

// A message to get the latest block info
message RelayerGetLatestBlockInfoRequest {}

// A message to get a certain block info based on the block number
message RelayerGetBlockInfoRequest {
    uint64 block_number = 1;
}

// A message to get the actual block object based on the block number
message RelayerGetBlockRequest {
    uint64 block_number = 1;
}

// Structure for BlockInfo
message BlockInfo {
    uint64 block_number = 1;
    bytes digest = 2;
}

// Structure for Block
message Block {
    bytes block = 1;
}

// Response from relayer with actual Block 
message RelayerBlockResponse {
    bool successful = 1;
    Block block = 2;
}

// TODO figure out how to import from narwhal. It almost worked but it failed because ../ is not allowed
// in the virtual path for some reason
message RelayerBlockInfoResponse {
    bool successful = 1;
    BlockInfo block_info = 2;
}

// A message to get the latest orderbook snap
message RelayerGetOrderbookSnapRequest {
    uint64 base_asset_id = 1;
    uint64 quote_asset_id = 2;
    uint64 depth = 3;
}

message Bid {
    uint64 price = 1;
    uint64 quantity = 2;
}

message Ask {
    uint64 price = 1;
    uint64 quantity = 2;
}

// A response of the latest orderbook snap
message RelayerOrderbookSnapResponse {
    repeated Bid bids = 1;
    repeated Ask asks = 2;
}